#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV;

out float gl_ClipDistance[6];


// Output data ; will be interpolated for each fragment.
out vec3 FragPos;
out vec3 Normal;

uniform vec4 ClipPlane[6];

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

    // clip
    gl_ClipDistance[0] = dot(gl_Position, ClipPlane[0]);
    gl_ClipDistance[1] = dot(gl_Position, ClipPlane[1]);
    gl_ClipDistance[2] = dot(gl_Position, ClipPlane[2]);
    gl_ClipDistance[3] = dot(gl_Position, ClipPlane[3]);
    gl_ClipDistance[4] = dot(gl_Position, ClipPlane[4]);
    gl_ClipDistance[5] = dot(gl_Position, ClipPlane[5]);

    Normal = normal;
    FragPos = vec3(MV * vec4(vertexPosition_modelspace,1));
}